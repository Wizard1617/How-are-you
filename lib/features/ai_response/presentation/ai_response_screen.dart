import 'dart:ui';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:emotion_gpt_app/features/ai_response/data/ai_response_api.dart';
import 'package:emotion_gpt_app/features/ai_response/domain/ai_response_model.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';

// –≠–∫—Ä–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –µ–≥–æ –≤ Firebase Firestore
class AiResponseScreen extends StatefulWidget {
  final String emotion;
  final String comment;

  const AiResponseScreen({
    super.key,
    required this.emotion,
    required this.comment,
  });

  @override
  State<AiResponseScreen> createState() => _AiResponseScreenState();
}

class _AiResponseScreenState extends State<AiResponseScreen>
    with SingleTickerProviderStateMixin {
  late Future<AiResponseModel> _futureResponse;
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  bool _isFavorite = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  DocumentReference? _savedDocRef; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç Firestore

  @override
  void initState() {
    super.initState();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    _controller = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    )..repeat(reverse: true);

    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.15).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    _futureResponse = _fetchAndSaveResponse();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ AI-–æ—Ç–≤–µ—Ç–∞ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ Firestore
  Future<AiResponseModel> _fetchAndSaveResponse() async {
    final api = AiResponseApi();
    final response =
        await api.fetchAiResponse(widget.emotion, widget.comment);

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    final docRef = await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('history')
        .add({
      'emotion': widget.emotion,
      'comment': widget.comment,
      'response': response.response,
      'timestamp': FieldValue.serverTimestamp(),
      'isFavorite': false,
    });

    _savedDocRef = docRef;
    _controller.stop();

    return response;
  }

  /// –≠–º–æ–¥–∑–∏ –ø–æ —ç–º–æ—Ü–∏–∏
  String getEmoji(String emotion) {
    final emotions = {
      '–ì—Ä—É—Å—Ç—å': 'üò¢',
      '–ó–ª–æ—Å—Ç—å': 'üò†',
      '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üòê',
      '–†–∞–¥–æ—Å—Ç—å': 'üôÇ',
      '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ': 'üòç',
      '–°—Ç—Ä–µ—Å—Å': 'ü§Ø',
      '–£—Å—Ç–∞–ª–æ—Å—Ç—å': 'üò¥',
      '–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': 'üò∂‚Äçüå´Ô∏è',
    };
    return emotions[emotion] ?? 'üôÇ';
  }

  /// –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
  BoxDecoration _buildBackground(bool isDark) {
    return BoxDecoration(
      gradient: isDark
          ? const LinearGradient(
              colors: [Color(0xFF1E1E2E), Color(0xFF121212)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            )
          : const LinearGradient(
              colors: [Color(0xFFa1c4fd), Color(0xFFc2e9fb)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final textColor = isDark ? Colors.white : Colors.black87;

    return Scaffold(
      extendBodyBehindAppBar: true,
      body: Container(
        decoration: _buildBackground(isDark),
        child: SafeArea(
          child: FutureBuilder<AiResponseModel>(
            future: _futureResponse,
            builder: (context, snapshot) {
              // –ó–∞–≥—Ä—É–∑–∫–∞
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      ScaleTransition(
                        scale: _scaleAnimation,
                        child: Text(
                          getEmoji(widget.emotion),
                          style: const TextStyle(fontSize: 80),
                        ),
                      ),
                      const SizedBox(height: 20),
                      Text(
                        '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...',
                        style: TextStyle(
                          fontSize: 18,
                          color: textColor.withOpacity(0.8),
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                );
              }

              // –û—à–∏–±–∫–∞
              else if (snapshot.hasError) {
                return Center(
                  child: Text(
                    '–û—à–∏–±–∫–∞:\n${snapshot.error}',
                    style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center,
                  ),
                );
              }

              // –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
              final aiResponse = snapshot.data!.response;

              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
                child: Column(
                  children: [
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    Text(
                      '${getEmoji(widget.emotion)} ${widget.emotion}',
                      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 24),

                    // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò + –±–ª—é—Ä
                    ClipRRect(
                      borderRadius: BorderRadius.circular(20),
                      child: BackdropFilter(
                        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.all(18),
                          decoration: BoxDecoration(
                            color: Colors.black.withOpacity(0.05),
                            borderRadius: BorderRadius.circular(20),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.1),
                                blurRadius: 10,
                              )
                            ],
                          ),
                          child: Text(
                            aiResponse,
                            style: TextStyle(
                              fontSize: 16,
                              color: textColor,
                              height: 1.4,
                            ),
                          ),
                        ),
                      ),
                    ).animate().fadeIn().slideY(begin: 0.2),

                    const Spacer(),

                    // –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                        IconButton(
                          onPressed: () async {
                            if (_savedDocRef != null) {
                              setState(() => _isFavorite = !_isFavorite);
                              await _savedDocRef!.update({'isFavorite': _isFavorite});
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(_isFavorite
                                      ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
                                      : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
                                ),
                              );
                            }
                          },
                          icon: Icon(
                            _isFavorite ? Icons.favorite : Icons.favorite_border,
                            color: Colors.pinkAccent,
                          ),
                          tooltip: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
                        ),

                        // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TODO)
                        IconButton(
                          onPressed: () {
                            // TODO: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∞—Ä–∏–Ω–≥–∞
                          },
                          icon: Icon(Icons.share, color: textColor),
                          tooltip: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                        ),

                        // –ù–∞–∑–∞–¥ –Ω–∞ —ç–∫—Ä–∞–Ω "–°–µ–≥–æ–¥–Ω—è"
                        ElevatedButton.icon(
                          onPressed: () => Navigator.pop(context),
                          icon: const Icon(Icons.today),
                          label: const Text('–°–µ–≥–æ–¥–Ω—è'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            foregroundColor: textColor,
                            elevation: 4,
                            shadowColor: Colors.black26,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 18, vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}
